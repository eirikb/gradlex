on: [ push, pull_request ]

jobs:
  stage2:
    name: Stage 2 installer
    runs-on: ubuntu-18.04
    outputs:
      sum: ${{ steps.sum.outputs.sum }}
    steps:
      - name: Source
        uses: actions/checkout@v2.1.0

      - uses: actions/cache@v2
        id: cache
        with:
          path: gradle-7.0-bin.zip
          key: gradle

      - name: Download Gradle
        if: steps.cache.outputs.cache-hit != 'true'
        run: wget https://services.gradle.org/distributions/gradle-7.0-bin.zip

      - name: Install Gradle
        run: unzip gradle-7.0-bin.zip

      - name: Install makeself
        run: |
          wget https://github.com/megastep/makeself/releases/download/release-2.4.3/makeself-2.4.3.run
          sh makeself-2.4.3.run

      - name: Build makeself
        run: |
          mkdir yes
          cp stage2.sh yes
          mv gradle-7.0 yes
          ./makeself-2.4.3/makeself.sh yes gradlex2 gradlex2 sh stage2.sh

      - name: Build checksum program
        run: |
          gcc -o checksum checksum.c

      - name: Check the sum
        id: sum
        run: echo "::set-output name=sum::$(./checksum)"

      - name: Rename to sum
        run: mv gradlex2 "gradlex2-${{ steps.sum.outputs.sum}}"

      - uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: .
          container_name: poc
          connection_string: ${{ secrets.ConnectionString }}
          extra_args: '--pattern gradlex*'
          sync: false


  x86:
    needs: stage2
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    env:
      artifact_name: gg_${{ matrix.os }}_x86
      sum: ${{ needs.stage2.outputs.sum }}

    name: gg_${{ matrix.os }}_x86

    steps:
      - uses: actions/checkout@v2

      - name: Checksumhack
        # ENV -> CMAKE -> Code very hard. This very easy
        shell: bash
        run: echo "const unsigned long long sum = $sum;" > sum.h

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Rename
        shell: bash
        run: |
          if [[ -f "build/gg" ]]; then
            mv build/gg ./${{ env.artifact_name }}
          else
            mv build/Debug/gg.exe ./${{ env.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.artifact_name }}

  musl:
    needs: stage2
    runs-on: ubuntu-latest
    # Hope this one isn't compromised
    container: spritsail/alpine-cmake

    env:
      artifact_name: gg_musl_x86
      sum: ${{ needs.stage2.outputs.sum }}

    name: gg_musl_x86

    steps:
      - uses: actions/checkout@v2

      - name: Checksumhack
        # ENV -> CMAKE -> Code very hard. This very easy
        run: echo "const unsigned long long sum = $sum;" > sum.h

      - name: BUILD
        run: |
          ls -lah
          mkdir build
          cd build
          cmake ..
          make
          mv gg ../${{ env.artifact_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.artifact_name }}

  # This actually works, but for now I don't need these archs
  on-arch:
    if: false
    runs-on: ubuntu-18.04

    env:
      artifact_name: gg_${{ matrix.distro }}_${{ matrix.arch }}

    name: gg_${{ matrix.distro }}_${{ matrix.arch }}

    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu18.04
          - arch: aarch64
            distro: alpine_latest
          - arch: ppc64le
            distro: alpine_latest
          - arch: s390x
            distro: fedora_latest

    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ github.token }}

          setup: |
            mkdir -p "${PWD}/artifacts"

          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          env: |
            artifact_name: ${{ env.artifact_name }}

          shell: /bin/sh
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster)
                apt-get update -q -y
                apt-get install -q -y build-essential cmake
                ;;
              fedora*)
                dnf -y update
                dnf -y install  make automake gcc gcc-c++ kernel-devel cmake
                ;;
              alpine*)
                apk update
                apk add alpine-sdk cmake
                ;;
            esac

          run: |
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make
            cd ..
            cp build/gg "/artifacts/${artifact_name}"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name }}
          path: artifacts/${{ env.artifact_name }}


  stage1:
    name: Stage 1 installer
    #needs: [ x86, on-arch ]
    needs: x86
    runs-on: ubuntu-18.04
    steps:
      - name: Source
        uses: actions/checkout@v2.1.0

      - name: Download gg
        uses: actions/download-artifact@v2

      - name: Install makeself
        run: |
          wget https://github.com/megastep/makeself/releases/download/release-2.4.3/makeself-2.4.3.run
          sh makeself-2.4.3.run

      - name: Build makeself
        run: |
          mkdir yes
          for dir in gg*; do
            for file in "$dir"/*; do
              cp "$file" yes
            done
          done
          cp stage1.sh yes
          ./makeself-2.4.3/makeself.sh yes gradlex gradlex sh stage1.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: gradlex
          path: gradlex


  test:
    name: Test
    needs: stage1
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Download gradlex
        uses: actions/download-artifact@v2
        with:
          name: gradlex

      - name: Run!
        run: sh gradlex -- --version


  test-musl:
    name: Test (musl)
    needs: stage1
    runs-on: ubuntu-latest
    container: openjdk:12-alpine

    steps:
      - name: Download gradlex
        uses: actions/download-artifact@v2
        with:
          name: gradlex

      - name: Run!
        run: sh gradlex -- --version


  release:
    name: Release!
    needs: [ test, test-musl ]
    runs-on: ubuntu-latest
    steps:
      - name: Generate build number
        id: buildnumber
        uses: einaregilsson/build-number@v3
        with:
          token: ${{secrets.github_token}}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.buildnumber.outputs.build_number }}
          release_name: Release ${{ steps.buildnumber.outputs.build_number }}
          draft: false
          prerelease: false

      - name: Download gradlex
        uses: actions/download-artifact@v2
        with:
          name: gradlex

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gradlex
          asset_name: gradlex
          asset_content_type: text/x-shellscript